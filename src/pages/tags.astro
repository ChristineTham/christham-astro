---
import type { MarkdownInstance } from 'astro'
import type { Frontmatter, TagType } from '../config'
import { SiteMetadata } from '../config'
import Base from '../layouts/base.astro'
import PageHero from '../components/pagehero.astro'
import {
  jupiter,
  cutout,
  pianoMan,
  pieFactory,
  graphPaper,
  charlieBrown,
  autumn,
  temple,
  deathStar,
  churchOnSunday,
  overlappingHexagons,
  bamboo,
  bathroomFloor,
  corkScrew,
  happyIntersection,
  kiwi,
  lips,
  lisbon,
  steelBeams,
  tinyCheckers,
  fancyRectangles,
  heavyRain,
  cage,
  connections,
  flippedDiamonds,
  houndstooth,
  morphingDiamonds,
  zigZag,
  aztec,
  bankNote,
  boxes,
  diagonalLines,
  endlessClouds,
  eyes,
  groovy,
  melt,
  parkayFloor,
  pixelDots,
  signal,
  wallpaper,
} from 'hero-patterns'

const patterns = [
  steelBeams('#d2386c', 0.5),
  jupiter('#d2386c', 0.5),
  cutout('#d2386c', 0.5),
  pianoMan('#d2386c', 0.5),
  pieFactory('#d2386c', 0.5),
  graphPaper('#d2386c', 0.5),
  charlieBrown('#d2386c', 0.5),
  autumn('#d2386c', 0.5),
  temple('#d2386c', 0.5),
  deathStar('#d2386c', 0.5),
  churchOnSunday('#d2386c', 0.5),
  overlappingHexagons('#d2386c', 0.5),
  bamboo('#d2386c', 0.5),
  bathroomFloor('#d2386c', 0.5),
  corkScrew('#d2386c', 0.5),
  happyIntersection('#d2386c', 0.5),
  kiwi('#d2386c', 0.5),
  lips('#d2386c', 0.5),
  lisbon('#d2386c', 0.5),
  tinyCheckers('#d2386c', 0.5),
  fancyRectangles('#d2386c', 0.5),
  heavyRain('#d2386c', 0.5),
  cage('#d2386c', 0.5),
  connections('#d2386c', 0.5),
  flippedDiamonds('#d2386c', 0.5),
  houndstooth('#d2386c', 0.5),
  morphingDiamonds('#d2386c', 0.5),
  zigZag('#d2386c', 0.5),
  aztec('#d2386c', 0.5),
  bankNote('#d2386c', 0.5),
  boxes('#d2386c', 0.5),
  diagonalLines('#d2386c', 0.5),
  endlessClouds('#d2386c', 0.5),
  eyes('#d2386c', 0.5),
  groovy('#d2386c', 0.5),
  melt('#d2386c', 0.5),
  parkayFloor('#d2386c', 0.5),
  pixelDots('#d2386c', 0.5),
  signal('#d2386c', 0.5),
  wallpaper('#d2386c', 0.5),
]

const frontmatter: Frontmatter = {
  title: 'Tags',
  description: 'Articles by tags',
  coverSVG: '../svg/undraw/add_notes.svg',
  socialImage: '../images/undraw/add_notes.png',
  publishDate: SiteMetadata.buildTime,
}

const allPosts = (await Astro.glob(
  './blog/*.{md,mdx}'
)) as MarkdownInstance<Frontmatter>[]
const posts = allPosts
  .map(post => ({ file: post.file, url: post.url, frontmatter: post.frontmatter }))
  .sort(
    (a, b) =>
      new Date(b.frontmatter.publishDate).valueOf() -
      new Date(a.frontmatter.publishDate).valueOf()
  )
  .filter(post => !post.frontmatter.draft)

const tagmap: Map<string, TagType> = new Map()

posts.forEach(post => {
  post.frontmatter.tags?.forEach(tag => {
    let utag = tagmap.get(tag)
    if (utag) {
      utag.count += 1
      utag.pages.push(post)
    } else {
      utag = { tag: tag, count: 1, pages: [post] }
    }
    tagmap.set(tag, utag)
  })
})

const tags = Array.from(tagmap.values())
---

<Base frontmatter={frontmatter}>
  <header>
    <PageHero
      title={frontmatter.title}
      description={frontmatter.description}
      coverSVG={frontmatter.coverSVG}
      socialImage={frontmatter.socialImage}
    />
  </header>
  <main class="bg-rosely7 dark:bg-rosely0">
    <div
      class="mx-4 py-4 grid grid-cols-2 gap-y-4 sm:grid-cols-3 md:grid-cols-4 gap-x-4 lg:grid-cols-5 xl:grid-cols-6 xl:gap-y-6 xl:gap-x-6"
    >
      {
        tags
          .sort((a, b) => b.count - a.count)
          .map((tag, i) => (
            <a
              href={`${import.meta.env.BASE_URL}tag/${tag.tag}/`}
              class="group"
            >
              <section
                class="relative w-full h-24 bg-cover bg-center group rounded-lg overflow-hidden shadow-lg hover:shadow-2xl  transition duration-300 ease-in-out"
                style={{
                  backgroundColor: '#dfdbe5',
                  // backgroundImage: `url(${OGImage})`,
                  backgroundImage: patterns[i % patterns.length],
                }}
              >
                <div class="absolute inset-0 bg-rosely9 bg-opacity-75 group-hover:opacity-75 transition duration-300 ease-in-out" />
                <div class="relative w-full h-full px-4 sm:px-6 lg:px-4 flex justify-center items-center">
                  <h3 class="text-center text-white text-2xl font-bold">
                    <span class="absolute inset-0" />
                    {tag.tag}
                  </h3>
                  <p class="text-center text-gray-200 text-sm font-medium">
                    &nbsp;({tag.count})
                  </p>
                </div>
              </section>
            </a>
          ))
      }
    </div>
  </main>
</Base>
