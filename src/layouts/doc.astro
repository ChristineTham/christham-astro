---
import type { MarkdownInstance } from 'astro'
import type { Frontmatter, Sidebar } from '../config'
import Base from './base.astro'
import PageContent from '../components/pagecontent.astro'
import LeftSidebar from '../components/leftsidebar.astro'
import RightSidebar from '../components/rightsidebar.astro'
import NextPrev from '../components/nextprev.astro'
import * as CONFIG from '../config'
import type { MarkdownHeading } from 'astro'

type Props = {
  frontmatter: Frontmatter
  headings: MarkdownHeading[]
}

const { frontmatter, headings } = Astro.props
const currentPage = Astro.url.toString()
const currentFile = `src/pages/${Astro.url.pathname.replace(import.meta.env.BASE_URL, '').replace(/\/$/, '')}.md`
const githubEditUrl = `${CONFIG.GITHUB_EDIT_URL}/${currentFile}`

const allDocs = (await Astro.glob(
  '../pages/bio/**/*.{md,mdx}'
)) as MarkdownInstance<Frontmatter>[]
const docs = allDocs
  .map(post => ({ file: post.file, url: post.url, frontmatter: post.frontmatter }))
  .filter(doc => !doc.frontmatter.draft)
  .sort((d1, d2) => d1.frontmatter.weight! - d2.frontmatter.weight!)
const sections = Array.from(
  new Set(docs.map(doc => doc.frontmatter.section))
) as string[]
let sidebar = {} as Sidebar
sections.forEach(
  section =>
    (sidebar[section] = docs
      .filter(doc => doc.frontmatter.section == section)
      .map(doc => ({ text: doc.frontmatter.title, link: doc.url as string })))
)
let prev: MarkdownInstance<Frontmatter>
let next: MarkdownInstance<Frontmatter>
docs.forEach((doc, i) => {
  if (currentPage.search(doc.url as string) >= 0) {
    if (i > 0) {
      prev = docs[i - 1]
    }
    if (i < docs.length - 1) {
      next = docs[i + 1]
    }
  }
})
---

<Base frontmatter={frontmatter}>
  <main class="relative mx-auto flex max-w-8xl justify-center sm:px-2 lg:px-8 xl:px-12 bg-white dark:bg-rosely0">
    <aside id="grid-left" class="grid-sidebar" title="Site Navigation">
      <LeftSidebar currentPage={currentPage} sidebar={sidebar} />
    </aside>
    <div id="grid-main">
      <PageContent
        frontmatter={frontmatter}
        headings={headings}
        githubEditUrl={githubEditUrl}
      >
      <section
        class="prose prose-purple max-w-none dark:prose-invert dark:text-rosely3 prose-headings:scroll-mt-28 prose-headings:font-display prose-headings:font-normal lg:prose-headings:scroll-mt-[8.5rem] prose-lead:text-rosely1 dark:prose-lead:text-rosely7 prose-a:font-semibold dark:prose-a:text-roselyB prose-a:no-underline prose-a:shadow-[inset_0_-2px_0_0_var(--tw-prose-background,#fff),inset_0_calc(-1*(var(--tw-prose-underline-size,4px)+2px))_0_0_var(--tw-prose-underline,theme(colors.purple.300))] hover:prose-a:[--tw-prose-underline-size:6px] dark:[--tw-prose-background:theme(colors.gray.900)] dark:prose-a:shadow-[inset_0_calc(-1*var(--tw-prose-underline-size,2px))_0_0_var(--tw-prose-underline,theme(colors.purple.800))] dark:hover:prose-a:[--tw-prose-underline-size:6px] prose-pre:rounded-xl prose-pre:bg-rosely1 prose-pre:shadow-lg dark:prose-pre:bg-slate-800/60 dark:prose-pre:shadow-none dark:prose-pre:ring-1 dark:prose-pre:ring-slate-300/10 dark:prose-hr:border-slate-800"
      >
        <slot />
      </section>
      <NextPrev prev={prev} next={next} />
      </PageContent>
    </div>
    <aside id="grid-right" class="grid-sidebar" title="Table of Contents">
      <RightSidebar headings={headings} githubEditUrl={githubEditUrl} />
    </aside>
  </main>
</Base>
